name: Release Ktl-SQL-Runner

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:

  build:
    name: Build Project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '21'

      - name: Grant execute permission
        run: chmod +x ./gradlew

      - name: Build Project
        run: ./gradlew build -x test

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '21'

      - name: Grant execute permission
        run: chmod +x ./gradlew

      - name: Run Tests
        run: ./gradlew test

  release:
    name: Publish Release
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: test

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '21'

      - name: Determine next version
        id: versioning
        run: |
          git fetch --tags

          LAST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | tail -n 1)

          if [ -z "$LAST_TAG" ]; then
            NEXT_VERSION="1.0.0"
          else
            echo "Last Tag: $LAST_TAG"
            MAJOR=$(echo "$LAST_TAG" | sed 's/^v//' | cut -d. -f1)
            MINOR=$(echo "$LAST_TAG" | sed 's/^v//' | cut -d. -f2)
            PATCH=$(echo "$LAST_TAG" | sed 's/^v//' | cut -d. -f3)

            NEXT_MINOR=$((MINOR + 1))
            NEXT_VERSION="$MAJOR.$NEXT_MINOR.$PATCH"
          fi

          echo "overrideVersion=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "NEXT_VERSION=$NEXT_VERSION"

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Build and publish
        run: ./gradlew publish -PoverrideVersion=${{ steps.versioning.outputs.overrideVersion }}
        env:
          GPR_USER: ${{ github.actor }}
          GPR_TOKEN: ${{ secrets.GPR_TOKEN }}

      - name: Create Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          TAG="v${{ steps.versioning.outputs.overrideVersion }}"
          git tag "$TAG"
          git push origin "$TAG"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.versioning.outputs.overrideVersion }}
          name: v${{ steps.versioning.outputs.overrideVersion }}
          body: Release ${{ steps.versioning.outputs.overrideVersion }}
