name: Build and Publish Sapshot

on:
  push:
    branches:
      - feature/test-workfloes

jobs:

  build:
    name: Build Project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '21'

      - name: Grant execute permission
        run: chmod +x ./gradlew

      - name: Build Project
        run: ./gradlew build -x test

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '21'

      - name: Grant execute permission
        run: chmod +x ./gradlew

      - name: Run Tests
        run: ./gradlew test

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Run tests and coverage
        run: ./gradlew test jacocoTestReport

      - name: Run SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          ./gradlew sonarqube \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.organization=tonelloiago \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN

  snapshot:
    name: Publish SNAPSHOT
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: static-analysis
    env:
      GPR_USER: ${{ github.actor }}
      GPR_TOKEN: ${{ secrets.GPR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '21'

      - name: Determine version
        id: versioning
        run: |
          git fetch --tags

          LAST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | tail -n 1)
          LAST_TAG=${LAST_TAG:-v0.0.0}

          MAJOR=$(echo "$LAST_TAG" | sed 's/^v//' | cut -d. -f1)
          MINOR=$(echo "$LAST_TAG" | sed 's/^v//' | cut -d. -f2)
          PATCH=$(echo "$LAST_TAG" | sed 's/^v//' | cut -d. -f3)

          NEXT_MINOR=$((MINOR + 1))
          NEXT_VERSION="$MAJOR.$NEXT_MINOR.$PATCH"

          FINAL_VERSION="$NEXT_VERSION-SNAPSHOT"
          
          echo "overrideVersion=$FINAL_VERSION" >> $GITHUB_OUTPUT
          echo "finalVersion=$FINAL_VERSION"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -PoverrideVersion=${{ steps.versioning.outputs.overrideVersion }}

      - name: Publish (main only)
        run: ./gradlew publish -PoverrideVersion=${{ steps.versioning.outputs.overrideVersion }}

      - name: Create Git Tag (main only)
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          TAG="v${{ steps.versioning.outputs.overrideVersion }}"

          git tag "$TAG"

          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/tonelloiago/ktl-sql-runner.git
          git push origin "$TAG"
